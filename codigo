#include <stdio.h>
#include <stdlib.h>
#include <string.h>
// Definição da estrutura do nó da lista de reprodução de músicas
typedef struct MusicNode {
    char artist[262];  // Nome do artista
    char song[262];    // Título da música
    struct MusicNode* next;  // Ponteiro para o próximo nó
    struct MusicNode* prev;  // Ponteiro para o nó anterior
} MusicNode;
// Definição da lista circular duplamente encadeada para armazenar as músicas
typedef struct {
    MusicNode* head;    // Ponteiro para o primeiro nó da lista
    MusicNode* current; // Ponteiro para o nó atual na reprodução
    int size;           // Tamanho atual da lista de músicas
} CircularDoublyLinkedList;
// Função para criar um novo nó na lista de músicas
MusicNode* create_music_node(const char* artist, const char* song) {
    MusicNode* new_node = (MusicNode*)malloc(sizeof(MusicNode)); // Alocando memória para o novo nó
    strcpy(new_node->artist, artist);  // Copiando o nome do artista para o novo nó
    strcpy(new_node->song, song);      // Copiando o título da música para o novo nó
    new_node->next = new_node->prev = NULL;  // Inicializando os ponteiros next e prev como NULL
    return new_node;  // Retornando o novo nó criado
}
// Função para criar uma nova lista de músicas
CircularDoublyLinkedList* create_music_list() {
    CircularDoublyLinkedList* list = (CircularDoublyLinkedList*)malloc(sizeof(CircularDoublyLinkedList)); // Alocando memória para a lista
    list->head = list->current = NULL;  // Inicializando os ponteiros head e current como NULL
    list->size = 0;  // Inicializando o tamanho da lista como 0
    return list;  // Retornando a lista criada
}
// Função para adicionar uma nova música à lista de reprodução
void append(CircularDoublyLinkedList* list, const char* artist, const char* song) {
    MusicNode* new_node = create_music_node(artist, song); // Criando um novo nó para a música
    if (list->size == 0) {  // Verificando se a lista está vazia
        list->head = list->current = new_node;  // Se estiver vazia, o novo nó será o primeiro e o atual
        new_node->next = new_node->prev = new_node;  // O novo nó aponta para ele mesmo em ambas as direções
    } else {
        MusicNode* tail = list->head->prev;  // Obtendo o último nó da lista
        tail->next = new_node;  // O próximo nó do último nó aponta para o novo nó
        new_node->prev = tail;   // O nó anterior ao novo nó é o último nó
        new_node->next = list->head;  // O próximo nó após o novo nó é o primeiro nó da lista
        list->head->prev = new_node;   // O nó anterior ao primeiro nó da lista é o novo nó
    }
    list->size++;  // Incrementando o tamanho da lista
}
// Função para exibir a lista de reprodução de músicas
void display_playlist(CircularDoublyLinkedList* list) {
    if (list->size == 0) {  // Verificando se a lista está vazia
        printf("A playlist está vazia.\n");
        return;
    }
    MusicNode* temp = list->head;  // Obtendo o primeiro nó da lista
    printf("\n===== PLAYLIST =====\n");
    for (int i = 0; i < list->size; i++) {
        printf("Artista: %s, Música: %s\n", temp->artist, temp->song); // Exibindo o artista e o título da música
        temp = temp->next;  // Avançando para o próximo nó na lista
    }
    printf("====================\n");
}
// Função para buscar uma música na lista de reprodução
MusicNode* find_song(CircularDoublyLinkedList* list, const char* song) {
    if (list->size == 0) return NULL;  // Se a lista estiver vazia, retorna NULL
    MusicNode* temp = list->head;  // Obtendo o primeiro nó da lista
    for (int i = 0; i < list->size; i++) {
        if (strcmp(temp->song, song) == 0) return temp;  // Se o título da música for encontrado, retorna o nó
        temp = temp->next;  // Avançando para o próximo nó na lista
    }
    return NULL;  // Se a música não for encontrada, retorna NULL
}
// Função para remover uma música da playlist
int remove_song(CircularDoublyLinkedList* list, const char* song) {
    MusicNode* node = find_song(list, song);  // Buscando o nó correspondente à música na lista
    if (!node) return 0;  // Se o nó não for encontrado, retorna 0
    if (list->size == 1) {  // Se a lista tiver apenas um nó
        free(node);  // Libera a memória do nó
        list->head = NULL;  // Define o ponteiro head como NULL
    } else {
        node->prev->next = node->next;  // Atualiza o ponteiro next do nó anterior ao nó a ser removido
        node->next->prev = node->prev;  // Atualiza o ponteiro prev do nó seguinte ao nó a ser removido
        if (node == list->head) list->head = node->next;  // Se o nó a ser removido for o primeiro, atualiza o ponteiro head
        free(node);  // Libera a memória do nó removido
    }
list->size--;  // Decrementa o tamanho da lista
return 1;  // Retorna 1 para indicar que a música foi removida com sucesso
}
// Função para avançar para a próxima música na playlist
MusicNode* next_song(CircularDoublyLinkedList* list) {
if (list->current) list->current = list->current->next; // Avança para o próximo nó na lista
return list->current; // Retorna o nó atual
}
// Função para retornar à música anterior na playlist
MusicNode* prev_song(CircularDoublyLinkedList* list) {
if (list->current) list->current = list->current->prev; // Retrocede para o nó anterior na lista
return list->current; // Retorna o nó atual
}
